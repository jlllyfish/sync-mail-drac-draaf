name: üöÄ Envoi automatique de messages DS Drac Draaf

on:
  schedule:
    # Tous les jours √† 10h00 UTC (10h00 Paris hiver, 11h00 Paris √©t√©)
    - cron: '0 10 * * *'
  workflow_dispatch:
    # Permet le d√©clenchement manuel depuis l'interface GitHub
    inputs:
      dry_run:
        description: 'üß™ Mode test (ne pas envoyer les messages)'
        required: false
        default: 'false'
        type: boolean
      force_send:
        description: 'üîÑ Forcer l envoi m√™me si d√©j√† envoy√©s'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  send-messages:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv
        # Optionnel : installer les d√©pendances depuis requirements.txt si vous en avez
        # pip install -r requirements.txt
    
    - name: üîß Verify configuration files
      run: |
        echo "üîç V√©rification des fichiers de configuration..."
        
        if [ ! -f "config/public-config.json" ]; then
          echo "‚ùå Fichier config/public-config.json manquant"
          echo "üí° Assurez-vous d'avoir export√© votre configuration depuis l'app Flask"
          exit 1
        fi
        
        if [ ! -f "scripts/send_batch.py" ]; then
          echo "‚ùå Fichier scripts/send_batch.py manquant"
          exit 1
        fi
        
        echo "‚úÖ Fichiers de configuration trouv√©s"
        echo "üìã Configuration trouv√©e dans config/public-config.json"
    
    - name: üîê Verify secrets
      env:
        DS_API_TOKEN: ${{ secrets.DS_API_TOKEN }}
        GRIST_API_TOKEN: ${{ secrets.GRIST_API_TOKEN }}
      run: |
        echo "üîç V√©rification des secrets GitHub..."
        
        if [ -z "$DS_API_TOKEN" ]; then
          echo "‚ùå Secret DS_API_TOKEN manquant"
          echo "üí° Ajoutez votre token DS dans GitHub Secrets"
          exit 1
        fi
        
        if [ -z "$GRIST_API_TOKEN" ]; then
          echo "‚ùå Secret GRIST_API_TOKEN manquant"
          echo "üí° Ajoutez votre token Grist dans GitHub Secrets"
          exit 1
        fi
        
        echo "‚úÖ Secrets trouv√©s"
        echo "üîê Token DS: ${DS_API_TOKEN:0:10}..."
        echo "üîê Token Grist: ${GRIST_API_TOKEN:0:10}..."
    
    - name: üìÅ Create logs directory
      run: |
        mkdir -p logs
        echo "üìÅ Dossier logs cr√©√©"
    
    - name: üöÄ Send batch messages
      env:
        DS_API_TOKEN: ${{ secrets.DS_API_TOKEN }}
        GRIST_API_TOKEN: ${{ secrets.GRIST_API_TOKEN }}
        APP_URL: ${{ secrets.APP_URL || 'http://localhost:5000' }}
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        FORCE_SEND: ${{ github.event.inputs.force_send || 'false' }}
      run: |
        echo "üöÄ D√©marrage de l'envoi par lot..."
        
        if [ "$DRY_RUN" = "true" ]; then
          echo "üß™ MODE TEST ACTIV√â - Aucun message ne sera envoy√©"
        fi
        
        if [ "$FORCE_SEND" = "true" ]; then
          echo "üîÑ MODE FORCE ACTIV√â - Renvoi des messages d√©j√† envoy√©s"
        fi
        
        python scripts/send_batch.py
    
    - name: üìä Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: send-results-${{ github.run_number }}
        path: |
          logs/
          *.log
        retention-days: 30
    
    - name: üìà Summary
      if: always()
      run: |
        echo "## üìä R√©sum√© de l'ex√©cution" >> $GITHUB_STEP_SUMMARY
        echo "- **Date:** $(date '+%d/%m/%Y %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** ${{ github.event.inputs.dry_run == 'true' && 'üß™ Test' || 'üöÄ Production' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/github-action.log" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Derni√®res lignes du log:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -10 logs/github-action.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        if ls logs/results-*.json 1> /dev/null 2>&1; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä R√©sultats disponibles dans les artefacts" >> $GITHUB_STEP_SUMMARY
          echo "T√©l√©chargez les artefacts pour voir les d√©tails des r√©sultats." >> $GITHUB_STEP_SUMMARY
        fi

  # Job optionnel : notification en cas d'√©chec
  notify-on-failure:
    runs-on: ubuntu-latest
    needs: send-messages
    if: failure()
    
    steps:
    - name: üìß Notification d'√©chec
      run: |
        echo "‚ùå L'envoi automatique a √©chou√©"
        echo "üîç V√©rifiez les logs dans l'onglet Actions"
        echo "üìä Les artefacts contiennent les d√©tails de l'erreur"
        
        # Ici vous pourriez ajouter une notification Slack, email, etc.
        # Exemple avec une webhook Slack :
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå Envoi DS automatique √©chou√© - Workflow: ${{ github.run_id }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
